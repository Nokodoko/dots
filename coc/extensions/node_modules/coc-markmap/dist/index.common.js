/*! coc-markmap v0.2.5 | MIT License */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coc_nvim = require('coc.nvim');
var markmapLib = require('markmap-lib');

async function getContent(nvim, line1 = '1', line2 = '"$"') {
  const lines = await nvim.eval(`getline(${line1},${line2})`);
  return lines.join('\n');
}

async function createMarkmapFromVim(nvim, {
  line1,
  line2,
  ...rest
} = {}) {
  const content = await getContent(nvim, line1, line2);
  const basename = await nvim.eval('expand("%:p:r")');
  markmapLib.createMarkmap({ ...rest,
    content,
    output: basename && `${basename}.html`
  });
}

function activate(context) {
  const {
    nvim
  } = coc_nvim.workspace;
  const config = coc_nvim.workspace.getConfiguration('markmap');
  context.subscriptions.push(coc_nvim.workspace.registerKeymap(['n'], 'markmap-create', async () => {
    await createMarkmapFromVim(nvim);
  }, {
    sync: false
  }));
  context.subscriptions.push(coc_nvim.workspace.registerKeymap(['v'], 'markmap-create-v', async () => {
    const [[, line1], [, line2]] = await nvim.eval('[getpos("\'<"),getpos("\'>")]');
    await createMarkmapFromVim(nvim, {
      line1: `${line1}`,
      line2: `${line2}`
    });
  }, {
    sync: false
  }));
  context.subscriptions.push(coc_nvim.commands.registerCommand('markmap.create', async (...args) => {
    const positional = [];
    const options = {
      mathJax: config.get('mathJax'),
      prism: config.get('prism')
    };

    for (const arg of args) {
      if (arg === '--enable-mathjax') options.mathJax = true;else if (arg === '--enable-prism') options.prism = true;else if (!arg.startsWith('-')) positional.push(arg);
    }

    [options.line1, options.line2] = positional;
    await createMarkmapFromVim(nvim, options);
  }));
}

exports.activate = activate;
